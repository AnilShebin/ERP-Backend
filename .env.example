I'll provide you with the full backend code for the client management system. This will include all necessary files and components.

Let's start with the directory structure and then go through each file:

```plaintext
src/
├── config/
│   ├── database.ts
│   └── constants.ts
├── models/
│   ├── BaseClient.ts
│   ├── IndividualClient.ts
│   ├── PrivateLimitedCompany.ts
│   ├── LimitedCompany.ts
│   ├── Trust.ts
│   ├── LLP.ts
│   ├── PartnershipFirm.ts
│   ├── HUF.ts
│   ├── BankDetail.ts
│   ├── ContactPerson.ts
│   └── ClientRelationship.ts
├── services/
│   └── clientService.ts
├── controllers/
│   └── clientController.ts
├── routes/
│   └── clientRoutes.ts
├── middlewares/
│   └── errorMiddleware.ts
└── server.ts
```

Now, let's go through each file:

1. `src/config/database.ts`:


```typescript
import { Sequelize } from 'sequelize';
import dotenv from 'dotenv';

dotenv.config();

const sequelize = new Sequelize(
  process.env.DB_NAME!,
  process.env.DB_USER!,
  process.env.DB_PASS!,
  {
    host: process.env.DB_HOST,
    dialect: 'mysql',
    logging: false,
  }
);

export default sequelize;
```

2. `src/config/constants.ts`:


```typescript
export const CLIENT_TYPES = [
  'Individual',
  'PrivateLimitedCompany',
  'LimitedCompany',
  'Trust',
  'LLP',
  'PartnershipFirm',
  'HUF'
] as const;

export type ClientType = typeof CLIENT_TYPES[number];
```

3. `src/models/BaseClient.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';

class BaseClient extends Model {
  public id!: number;
  public panNumber!: string;
  public email!: string;
  public contactNo!: string;
  public alternateNo?: string;
  public address!: string;
  public pincode!: string;
  public gstin?: string;
}

BaseClient.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    panNumber: {
      type: DataTypes.STRING,
      unique: true,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
      unique: true,
      allowNull: false,
    },
    contactNo: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    alternateNo: {
      type: DataTypes.STRING,
    },
    address: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    pincode: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    gstin: {
      type: DataTypes.STRING,
    },
  },
  {
    sequelize,
    modelName: 'BaseClient',
    tableName: 'base_clients',
  }
);

export default BaseClient;
```

4. `src/models/IndividualClient.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';
import BaseClient from './BaseClient';

class IndividualClient extends Model {
  public id!: number;
  public baseClientId!: number;
  public firstName!: string;
  public lastName!: string;
  public middleName?: string;
  public businessName?: string;
  public dateOfBusinessStarting?: Date;
  public groupName?: string;
}

IndividualClient.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    baseClientId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: BaseClient,
        key: 'id',
      },
    },
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    middleName: {
      type: DataTypes.STRING,
    },
    businessName: {
      type: DataTypes.STRING,
    },
    dateOfBusinessStarting: {
      type: DataTypes.DATE,
    },
    groupName: {
      type: DataTypes.STRING,
    },
  },
  {
    sequelize,
    modelName: 'IndividualClient',
    tableName: 'individual_clients',
  }
);

IndividualClient.belongsTo(BaseClient, { foreignKey: 'baseClientId' });

export default IndividualClient;
```

5. `src/models/PrivateLimitedCompany.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';
import BaseClient from './BaseClient';

class PrivateLimitedCompany extends Model {
  public id!: number;
  public baseClientId!: number;
  public companyName!: string;
  public groupName?: string;
  public dateOfIncorporation!: Date;
  public cinNumber!: string;
  public communicationAddress?: string;
  public authorisedCapital?: number;
  public issuedCapital?: number;
  public paidUpCapital?: number;
}

PrivateLimitedCompany.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    baseClientId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: BaseClient,
        key: 'id',
      },
    },
    companyName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    groupName: {
      type: DataTypes.STRING,
    },
    dateOfIncorporation: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    cinNumber: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
    communicationAddress: {
      type: DataTypes.STRING,
    },
    authorisedCapital: {
      type: DataTypes.DECIMAL(10, 2),
    },
    issuedCapital: {
      type: DataTypes.DECIMAL(10, 2),
    },
    paidUpCapital: {
      type: DataTypes.DECIMAL(10, 2),
    },
  },
  {
    sequelize,
    modelName: 'PrivateLimitedCompany',
    tableName: 'private_limited_companies',
  }
);

PrivateLimitedCompany.belongsTo(BaseClient, { foreignKey: 'baseClientId' });

export default PrivateLimitedCompany;
```

6. `src/models/LimitedCompany.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';
import BaseClient from './BaseClient';

class LimitedCompany extends Model {
  public id!: number;
  public baseClientId!: number;
  public companyName!: string;
  public dateOfIncorporation!: Date;
  public cinNumber!: string;
  public tan?: string;
  public city?: string;
  public state?: string;
  public communicationAddress?: string;
  public authorisedCapital?: number;
  public issuedCapital?: number;
  public paidUpCapital?: number;
}

LimitedCompany.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    baseClientId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: BaseClient,
        key: 'id',
      },
    },
    companyName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    dateOfIncorporation: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    cinNumber: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
    tan: {
      type: DataTypes.STRING,
    },
    city: {
      type: DataTypes.STRING,
    },
    state: {
      type: DataTypes.STRING,
    },
    communicationAddress: {
      type: DataTypes.STRING,
    },
    authorisedCapital: {
      type: DataTypes.DECIMAL(10, 2),
    },
    issuedCapital: {
      type: DataTypes.DECIMAL(10, 2),
    },
    paidUpCapital: {
      type: DataTypes.DECIMAL(10, 2),
    },
  },
  {
    sequelize,
    modelName: 'LimitedCompany',
    tableName: 'limited_companies',
  }
);

LimitedCompany.belongsTo(BaseClient, { foreignKey: 'baseClientId' });

export default LimitedCompany;
```

7. `src/models/Trust.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';
import BaseClient from './BaseClient';

class Trust extends Model {
  public id!: number;
  public baseClientId!: number;
  public trustName!: string;
  public dateOfIncorporation!: Date;
  public registeredOffice?: string;
  public communicationAddress?: string;
}

Trust.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    baseClientId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: BaseClient,
        key: 'id',
      },
    },
    trustName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    dateOfIncorporation: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    registeredOffice: {
      type: DataTypes.STRING,
    },
    communicationAddress: {
      type: DataTypes.STRING,
    },
  },
  {
    sequelize,
    modelName: 'Trust',
    tableName: 'trusts',
  }
);

Trust.belongsTo(BaseClient, { foreignKey: 'baseClientId' });

export default Trust;
```

8. `src/models/LLP.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';
import BaseClient from './BaseClient';

class LLP extends Model {
  public id!: number;
  public baseClientId!: number;
  public name!: string;
  public dateOfIncorporation!: Date;
  public frn?: string;
  public registeredOffice?: string;
  public communicationAddress?: string;
}

LLP.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    baseClientId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: BaseClient,
        key: 'id',
      },
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    dateOfIncorporation: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    frn: {
      type: DataTypes.STRING,
    },
    registeredOffice: {
      type: DataTypes.STRING,
    },
    communicationAddress: {
      type: DataTypes.STRING,
    },
  },
  {
    sequelize,
    modelName: 'LLP',
    tableName: 'llps',
  }
);

LLP.belongsTo(BaseClient, { foreignKey: 'baseClientId' });

export default LLP;
```

9. `src/models/PartnershipFirm.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';
import BaseClient from './BaseClient';

class PartnershipFirm extends Model {
  public id!: number;
  public baseClientId!: number;
  public name!: string;
  public dateOfIncorporation!: Date;
  public registeredOffice?: string;
}

PartnershipFirm.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    baseClientId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: BaseClient,
        key: 'id',
      },
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    dateOfIncorporation: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    registeredOffice: {
      type: DataTypes.STRING,
    },
  },
  {
    sequelize,
    modelName: 'PartnershipFirm',
    tableName: 'partnership_firms',
  }
);

PartnershipFirm.belongsTo(BaseClient, { foreignKey: 'baseClientId' });

export default PartnershipFirm;
```

10. `src/models/HUF.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';
import BaseClient from './BaseClient';

class HUF extends Model {
  public id!: number;
  public baseClientId!: number;
  public name!: string;
  public dateOfIncorporation!: Date;
  public registeredOffice?: string;
}

HUF.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    baseClientId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: BaseClient,
        key: 'id',
      },
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    dateOfIncorporation: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    registeredOffice: {
      type: DataTypes.STRING,
    },
  },
  {
    sequelize,
    modelName: 'HUF',
    tableName: 'hufs',
  }
);

HUF.belongsTo(BaseClient, { foreignKey: 'baseClientId' });

export default HUF;
```

11. `src/models/BankDetail.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';
import BaseClient from './BaseClient';

class BankDetail extends Model {
  public id!: number;
  public baseClientId!: number;
  public bankName!: string;
  public branch!: string;
  public accountType!:  string;
  public accountNo!: string;
  public ifscCode!: string;
}

BankDetail.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    baseClientId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: BaseClient,
        key: 'id',
      },
    },
    bankName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    branch: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    accountType: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    accountNo: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    ifscCode: {
      type: DataTypes.STRING,
      allowNull: false,
    },
  },
  {
    sequelize,
    modelName: 'BankDetail',
    tableName: 'bank_details',
  }
);

BankDetail.belongsTo(BaseClient, { foreignKey: 'baseClientId' });
BaseClient.hasMany(BankDetail, { 
  foreignKey: 'baseClientId',
  as: 'bankDetails',
});

export default BankDetail;
```

12. `src/models/ContactPerson.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';
import BaseClient from './BaseClient';

class ContactPerson extends Model {
  public id!: number;
  public baseClientId!: number;
  public name!: string;
  public designation?: string;
  public phoneNumber!: string;
  public email!: string;
}

ContactPerson.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    baseClientId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: BaseClient,
        key: 'id',
      },
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    designation: {
      type: DataTypes.STRING,
    },
    phoneNumber: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
    },
  },
  {
    sequelize,
    modelName: 'ContactPerson',
    tableName: 'contact_persons',
  }
);

ContactPerson.belongsTo(BaseClient, { foreignKey: 'baseClientId' });
BaseClient.hasMany(ContactPerson, {
  foreignKey: 'baseClientId',
  as: 'contactPersons',
});

export default ContactPerson;
```

13. `src/models/ClientRelationship.ts`:


```typescript
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database';
import BaseClient from './BaseClient';
import { CLIENT_TYPES } from '../config/constants';

class ClientRelationship extends Model {
  public id!: number;
  public clientId!: number;
  public entityId!: number;
  public entityType!: string;
  public role!: string;
  public sharePercentage?: number;
}

ClientRelationship.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    clientId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: BaseClient,
        key: 'id',
      },
    },
    entityId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
    },
    entityType: {
      type: DataTypes.ENUM(...CLIENT_TYPES),
      allowNull: false,
    },
    role: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    sharePercentage: {
      type: DataTypes.DECIMAL(5, 2),
    },
  },
  {
    sequelize,
    modelName: 'ClientRelationship',
    tableName: 'client_relationships',
  }
);

ClientRelationship.belongsTo(BaseClient, { foreignKey: 'clientId', as: 'client' });
BaseClient.hasMany(ClientRelationship, { foreignKey: 'clientId', as: 'relationships' });

export default ClientRelationship;
```

14. `src/services/clientService.ts`:


```typescript
import { Transaction } from 'sequelize';
import BaseClient from '../models/BaseClient';
import IndividualClient from '../models/IndividualClient';
import PrivateLimitedCompany from '../models/PrivateLimitedCompany';
import LimitedCompany from '../models/LimitedCompany';
import Trust from '../models/Trust';
import LLP from '../models/LLP';
import PartnershipFirm from '../models/PartnershipFirm';
import HUF from '../models/HUF';
import BankDetail from '../models/BankDetail';
import ContactPerson from '../models/ContactPerson';
import ClientRelationship from '../models/ClientRelationship';
import sequelize from '../config/database';
import { ClientType } from '../config/constants';

export const createClient = async (clientData: any) => {
  const transaction = await sequelize.transaction();

  try {
    const baseClient = await BaseClient.create(clientData.baseClient, { transaction });

    let specificClient;
    switch (clientData.type as ClientType) {
      case 'Individual':
        specificClient = await IndividualClient.create({ ...clientData.specificData, baseClientId: baseClient.id }, { transaction });
        break;
      case 'PrivateLimitedCompany':
        specificClient = await PrivateLimitedCompany.create({ ...clientData.specificData, baseClientId: baseClient.id }, { transaction });
        break;
      case 'LimitedCompany':
        specificClient = await LimitedCompany.create({ ...clientData.specificData, baseClientId: baseClient.id }, { transaction });
        break;
      case 'Trust':
        specificClient = await Trust.create({ ...clientData.specificData, baseClientId: baseClient.id }, { transaction });
        break;
      case 'LLP':
        specificClient = await LLP.create({ ...clientData.specificData, baseClientId: baseClient.id }, { transaction });
        break;
      case 'PartnershipFirm':
        specificClient = await PartnershipFirm.create({ ...clientData.specificData, baseClientId: baseClient.id }, { transaction });
        break;
      case 'HUF':
        specificClient = await HUF.create({ ...clientData.specificData, baseClientId: baseClient.id }, { transaction });
        break;
      default:
        throw new Error('Invalid client type');
    }

    if (clientData.bankDetails) {
      await BankDetail.bulkCreate(
        clientData.bankDetails.map((detail: any) => ({ ...detail, baseClientId: baseClient.id })),
        { transaction }
      );
    }

    if (clientData.contactPersons) {
      await ContactPerson.bulkCreate(
        clientData.contactPersons.map((person: any) => ({ ...person, baseClientId: baseClient.id })),
        { transaction }
      );
    }

    if (clientData.relationships) {
      await ClientRelationship.bulkCreate(
        clientData.relationships.map((relationship: any) => ({ ...relationship, clientId: baseClient.id })),
        { transaction }
      );
    }

    await transaction.commit();

    return { baseClient, specificClient };
  } catch (error) {
    await transaction.rollback();
    throw error;
  }
};

export const getClientById = async (id: number) => {
  const baseClient = await BaseClient.findByPk(id, {
    include: [
      { model: BankDetail, as: 'bankDetails' },
      { model: ContactPerson, as: 'contactPersons' },
      { model: ClientRelationship, as: 'relationships' },
    ],
  });

  if (!baseClient) {
    return null;
  }

  const clientTypes = [IndividualClient, PrivateLimitedCompany, LimitedCompany, Trust, LLP, PartnershipFirm, HUF];
  let specificClient = null;

  for (const ClientModel of clientTypes) {
    specificClient = await ClientModel.findOne({ where: { baseClientId: id } });
    if (specificClient) {
      break;
    }
  }

  return { baseClient, specificClient };
};

export const updateClient = async (id: number, clientData: any) => {
  const transaction = await sequelize.transaction();

  try {
    const baseClient = await BaseClient.findByPk(id);
    if (!baseClient) {
      throw new Error('Client not found');
    }

    await baseClient.update(clientData.baseClient, { transaction });

    const clientTypes = [IndividualClient, PrivateLimitedCompany, LimitedCompany, Trust, LLP, PartnershipFirm, HUF];
    let specificClient = null;

    for (const ClientModel of clientTypes) {
      specificClient = await ClientModel.findOne({ where: { baseClientId: id } });
      if (specificClient) {
        await specificClient.update(clientData.specificData, { transaction });
        break;
      }
    }

    if (clientData.bankDetails) {
      await BankDetail.destroy({ where: { baseClientId: id }, transaction });
      await BankDetail.bulkCreate(
        clientData.bankDetails.map((detail: any) => ({ ...detail, baseClientId: id })),
        { transaction }
      );
    }

    if (clientData.contactPersons) {
      await ContactPerson.destroy({ where: { baseClientId: id }, transaction });
      await ContactPerson.bulkCreate(
        clientData.contactPersons.map((person: any) => ({ ...person, baseClientId: id })),
        { transaction }
      );
    }

    if (clientData.relationships) {
      await ClientRelationship.destroy({ where: { clientId: id }, transaction });
      await ClientRelationship.bulkCreate(
        clientData.relationships.map((relationship: any) => ({ ...relationship, clientId: id })),
        { transaction }
      );
    }

    await transaction.commit();

    return { baseClient, specificClient };
  } catch (error) {
    await transaction.rollback();
    throw error;
  }
};

export const deleteClient = async (id: number) => {
  const transaction = await sequelize.transaction();

  try {
    const baseClient = await BaseClient.findByPk(id);
    if (!baseClient) {
      throw new Error('Client not found');
    }

    await BankDetail.destroy({ where: { baseClientId: id }, transaction });
    await ContactPerson.destroy({ where: { baseClientId: id }, transaction });
    await ClientRelationship.destroy({ where: { clientId: id }, transaction });

    const clientTypes = [IndividualClient, PrivateLimitedCompany, LimitedCompany, Trust, LLP, PartnershipFirm, HUF];
    for (const ClientModel of clientTypes) {
      await ClientModel.destroy({ where: { baseClientId: id }, transaction });
    }

    await baseClient.destroy({ transaction });

    await transaction.commit();

    return true;
  } catch (error) {
    await transaction.rollback();
    throw error;
  }
};

export const getAllClients = async () => {
  const baseClients = await BaseClient.findAll({
    include: [
      { model: BankDetail, as: 'bankDetails' },
      { model: ContactPerson, as: 'contactPersons' },
      { model: ClientRelationship, as: 'relationships' },
    ],
  });

  const clientsWithDetails = await Promise.all(
    baseClients.map(async (baseClient) => {
      const clientTypes = [IndividualClient, PrivateLimitedCompany, LimitedCompany, Trust, LLP, PartnershipFirm, HUF];
      let specificClient = null;

      for (const ClientModel of clientTypes) {
        specificClient = await ClientModel.findOne({ where: { baseClientId: baseClient.id } });
        if (specificClient) {
          break;
        }
      }

      return { baseClient, specificClient };
    })
  );

  return clientsWithDetails;
};

export const searchClients = async (searchTerm: string) => {
  const baseClients = await BaseClient.findAll({
    where: {
      [sequelize.Op.or]: [
        { panNumber: { [sequelize.Op.like]: `%${searchTerm}%` } },
        { email: { [sequelize.Op.like]: `%${searchTerm}%` } },
        { contactNo: { [sequelize.Op.like]: `%${searchTerm}%` } },
      ],
    },
    include: [
      { model: BankDetail, as: 'bankDetails' },
      { model: ContactPerson, as: 'contactPersons' },
      { model: ClientRelationship, as: 'relationships' },
    ],
  });

  const clientsWithDetails = await Promise.all(
    baseClients.map(async (baseClient) => {
      const clientTypes = [IndividualClient, PrivateLimitedCompany, LimitedCompany, Trust, LLP, PartnershipFirm, HUF];
      let specificClient = null;

      for (const ClientModel of clientTypes) {
        specificClient = await ClientModel.findOne({ where: { baseClientId: baseClient.id } });
        if (specificClient) {
          break;
        }
      }

      return { baseClient, specificClient };
    })
  );

  return clientsWithDetails;
};

export const addClientRelationship = async (relationshipData: any) => {
  return await ClientRelationship.create(relationshipData);
};

export const updateClientRelationship = async (id: number, relationshipData: any) => {
  const relationship = await ClientRelationship.findByPk(id);
  if (!relationship) {
    throw new Error('Relationship not found');
  }
  return await relationship.update(relationshipData);
};

export const deleteClientRelationship = async (id: number) => {
  const relationship = await ClientRelationship.findByPk(id);
  if (!relationship) {
    throw new Error('Relationship not found');
  }
  await relationship.destroy();
  return true;
};

export const getClientRelationships = async (clientId: number) => {
  return await ClientRelationship.findAll({
    where: { clientId },
    include: [{ model: BaseClient, as: 'client' }],
  });
};

export const getEntityRelationships = async (entityId: number, entityType: ClientType) => {
  return await ClientRelationship.findAll({
    where: { entityId, entityType },
    include: [{ model: BaseClient, as: 'client' }],
  });
};
```

15. `src/controllers/clientController.ts`:


```typescript
import { Request, Response } from 'express';
import * as clientService from '../services/clientService';

export const createClient = async (req: Request, res: Response) => {
  try {
    const client = await clientService.createClient(req.body);
    res.status(201).json(client);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

export const getClient = async (req: Request, res: Response) => {
  try {
    const client = await clientService.getClientById(parseInt(req.params.id));
    if (client) {
      res.json(client);
    } else {
      res.status(404).json({ message: 'Client not found' });
    }
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

export const updateClient = async (req: Request, res: Response) => {
  try {
    const client = await clientService.updateClient(parseInt(req.params.id), req.body);
    res.json(client);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

export const deleteClient = async (req: Request, res: Response) => {
  try {
    await clientService.deleteClient(parseInt(req.params.id));
    res.status(204).end();
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

export const getAllClients = async (req: Request, res: Response) => {
  try {
    const clients = await clientService.getAllClients();
    res.json(clients);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

export const searchClients = async (req: Request, res: Response) => {
  try {
    const searchTerm = req.query.term as string;
    const clients = await clientService.searchClients(searchTerm);
    res.json(clients);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

export const addClientRelationship = async (req: Request, res: Response) => {
  try {
    const relationship = await clientService.addClientRelationship(req.body);
    res.status(201).json(relationship);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

export const updateClientRelationship = async (req: Request, res: Response) => {
  try {
    const relationship = await clientService.updateClientRelationship(parseInt(req.params.id), req.body);
    res.json(relationship);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

export const deleteClientRelationship = async (req: Request, res: Response) => {
  try {
    await clientService.deleteClientRelationship(parseInt(req.params.id));
    res.status(204).end();
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

export const getClientRelationships = async (req: Request, res: Response) => {
  try {
    const relationships = await clientService.getClientRelationships(parseInt(req.params.clientId));
    res.json(relationships);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

export const getEntityRelationships = async (req: Request, res: Response) => {
  try {
    const relationships = await clientService.getEntityRelationships(parseInt(req.params.entityId), req.params.entityType as any);
    res.json(relationships);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};
```

16. `src/routes/clientRoutes.ts`:


```typescript
import express from 'express';
import * as clientController from '../controllers/clientController';

const router = express.Router();

router.post('/clients', clientController.createClient);
router.get('/clients', clientController.getAllClients);
router.get('/clients/search', clientController.searchClients);
router.get('/clients/:id', clientController.getClient);
router.put('/clients/:id', clientController.updateClient);
router.delete('/clients/:id', clientController.deleteClient);

router.post('/relationships', clientController.addClientRelationship);
router.put('/relationships/:id', clientController.updateClientRelationship);
router.delete('/relationships/:id', clientController.deleteClientRelationship);
router.get('/clients/:clientId/relationships', clientController.getClientRelationships);
router.get('/entities/:entityId/:entityType/relationships', clientController.getEntityRelationships);

export default router;
```

17. `src/middlewares/errorMiddleware.ts`:


```typescript
import { Request, Response, NextFunction } from 'express';

export const errorHandler = (err: Error, req: Request, res: Response, next: NextFunction) => {
  console.error(err.stack);
  res.status(500).json({ message: 'Something went wrong!' });
};
```

18. `src/server.ts`:


```typescript
import express from 'express';
import cors from 'cors';
import clientRoutes from './routes/clientRoutes';
import { errorHandler } from './middlewares/errorMiddleware';
import sequelize from './config/database';

const app = express();

app.use(cors());
app.use(express.json());

app.use('/api', clientRoutes);

app.use(errorHandler);

const PORT = process.env.PORT || 3000;

sequelize.sync().then(() => {
  app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
  });
});
```

This completes the backend implementation for the client management system. The code includes models for different types of clients, services for CRUD operations, controllers to handle HTTP requests, routes to define API endpoints, and necessary configurations and middleware.

To run this backend:

1. Make sure you have Node.js and MySQL installed.
2. Create a `.env` file in the root directory with the following content (adjust as needed):


```plaintext
DB_NAME=your_database_name
DB_USER=your_database_user
DB_PASS=your_database_password
DB_HOST=localhost
PORT=3000
```

3. Install dependencies:


```plaintext
npm install express sequelize mysql2 cors dotenv
npm install -D typescript @types/express @types/cors
```

4. Compile TypeScript:


```plaintext
npx tsc
```

5. Run the server:


```plaintext
node dist/server.js
```

This backend provides a robust foundation for managing various types of clients and their relationships. It's designed to be flexible and can be easily extended to accommodate additional features or client types in the future.